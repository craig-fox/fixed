'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createInstance;

var _nodeEtcd = require('node-etcd');

var _nodeEtcd2 = _interopRequireDefault(_nodeEtcd);

var _confetaText = require('confeta-text');

var _confetaText2 = _interopRequireDefault(_confetaText);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ConfetaEtcd = function (_ConfetaText) {
  _inherits(ConfetaEtcd, _ConfetaText);

  function ConfetaEtcd(hosts, path) {
    var etcdOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var confetaOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};

    _classCallCheck(this, ConfetaEtcd);

    var etcd = new _nodeEtcd2.default(hosts, etcdOptions);

    var _etcd$getSync = etcd.getSync(path),
        _etcd$getSync$body$no = _etcd$getSync.body.node.value,
        value = _etcd$getSync$body$no === undefined ? '{}' : _etcd$getSync$body$no;

    return _possibleConstructorReturn(this, (ConfetaEtcd.__proto__ || Object.getPrototypeOf(ConfetaEtcd)).call(this, value, { parseFn: confetaOptions.parseFn }));
  }

  return ConfetaEtcd;
}(_confetaText2.default);

function createInstance() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return new (Function.prototype.bind.apply(ConfetaEtcd, [null].concat(args)))();
}