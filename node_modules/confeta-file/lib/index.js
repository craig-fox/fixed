'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createInstance;

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _confetaText = require('confeta-text');

var _confetaText2 = _interopRequireDefault(_confetaText);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ConfetaFile = function (_ConfetaText) {
  _inherits(ConfetaFile, _ConfetaText);

  function ConfetaFile(filePath) {
    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];

    _classCallCheck(this, ConfetaFile);

    if (!_path2.default.isAbsolute(filePath)) {
      filePath = _path2.default.resolve(process.cwd(), filePath);
    }

    if (!_fs2.default.existsSync(filePath)) {
      var _this, _ret;

      return _ret = (_this = _possibleConstructorReturn(this, Object.getPrototypeOf(ConfetaFile).call(this, '{}')), _this), _possibleConstructorReturn(_this, _ret);
    }

    var text = _fs2.default.readFileSync(filePath, 'utf8');

    return _possibleConstructorReturn(this, Object.getPrototypeOf(ConfetaFile).call(this, text, { parseFn: options.parseFn }));
  }

  return ConfetaFile;
}(_confetaText2.default);

function createInstance() {
  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }

  return new (Function.prototype.bind.apply(ConfetaFile, [null].concat(args)))();
}